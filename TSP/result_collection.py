# -*- coding: utf-8 -*-
"""
Created on Wed Oct 25 18:02:53 2017

@author: Sukri
"""

import numpy as np
import pandas as pd
import os
import time
import random
import math
import matplotlib.pyplot as plt

##############################################################################
#Calculate length
def calc_length(dataset, path):
    length = 0
    for i in list(range(0, len(path))):
#        length += distance(dataset[path[i-1]], dataset[path[i]])
        length += tsp_cost(path[i-1], path[i], dataset)
    return length

#Distance square
def distance(c1, c2):
    t1 = c2[0] - c1[0]
    t2 = c2[1] - c1[1]

    return math.sqrt(t1**2 + t2**2)
##############################################################################
##############################################################################
def tsp_cost(i, j, dataset):
    pi = 3.14159265358979323846264
    
    lat_i = (pi*dataset[i][0])/180
    lat_j = (pi*dataset[j][0])/180
    long_i = (pi*dataset[i][1])/180
    long_j = (pi*dataset[j][1])/180
    
    q1 = math.cos(lat_j)*math.sin(long_i-long_j)
    q3 = math.sin((long_i-long_j)/2.0)
    q4 = math.cos((long_i-long_j)/2.0)
    q2 = math.sin(lat_i+lat_j)*q3*q3 - math.sin(lat_i-lat_j)*q4*q4
    q5 = math.cos(lat_i-lat_j)*q4*q4 - math.cos(lat_i+lat_j)*q3*q3
    
    return (6378.3880*math.atan2(math.sqrt((q1*q1)+(q2*q2)),q5)+1.0)


##############################################################################




#Data preparation
df = pd.read_csv('test_980.csv', header = 0)
df = df.drop('city', 1)
df_i = df.drop('j', 1)
df_i = df_i.drop_duplicates(keep ='first')

df_drop = df.drop_duplicates(subset = 'i', keep = 'first')

dataset = df_drop.as_matrix(columns = None)

print(dataset.shape)

#980
b_soln = [519, 312, 356, 365, 114, 445, 69, 354, 33, 515, 520, 224, 418, 397, 421, 7, 128, 514, 472, 409, 26, 420, 457, 107, 145, 9, 92, 510, 526, 294, 144, 80, 367, 268, 317, 2, 430, 201, 181, 523, 250, 215, 64, 243, 385, 157, 38, 359, 500, 393, 170, 299, 171, 136, 402, 506, 369, 290, 448, 464, 450, 47, 216, 446, 139, 343, 465, 463, 1, 5, 108, 273, 383, 271, 6, 41, 221, 454, 476, 340, 381, 382, 76, 248, 167, 427, 34, 361, 438, 490, 337, 146, 502, 508, 357, 111, 39, 237, 414, 415, 225, 364, 492, 31, 389, 88, 79, 187, 276, 411, 351, 143, 380, 311, 376, 412, 205, 213, 56, 121, 234, 491, 306, 373, 106, 27, 46, 131, 60, 407, 236, 219, 172, 95, 209, 8, 335, 86, 184, 152, 473, 316, 423, 21, 521, 287, 220, 20, 228, 97, 518, 178, 94, 3, 281, 120, 159, 226, 222, 498, 127, 374, 155, 89, 259, 320, 255, 485, 345, 481, 217, 74, 348, 44, 344, 507, 218, 84, 126, 261, 425, 12, 435, 297, 210, 30, 477, 449, 251, 332, 384, 452, 232, 71, 497, 244, 13, 468, 284, 235, 300, 98, 151, 334, 517, 474, 57, 291, 456, 471, 487, 270, 447, 501, 24, 451, 366, 42, 400, 18, 315, 408, 458, 371, 328, 174, 327, 330, 285, 303, 522, 269, 15, 161, 85, 484, 214, 293, 142, 53, 394, 289, 479, 242, 134, 431, 432, 211, 326, 162, 48, 32, 230, 212, 154, 17, 278, 467, 298, 63, 511, 67, 204, 256, 494, 51, 387, 45, 72, 54, 180, 133, 310, 263, 274, 319, 466, 323, 28, 272, 505, 23, 396, 333, 488, 429, 16, 377, 322, 100, 183, 203, 486, 240, 55, 166, 113, 329, 470, 117, 513, 35, 360, 336, 207, 417, 73, 433, 442, 267, 401, 238, 37, 416, 233, 192, 460, 375, 444, 68, 140, 301, 109, 436, 241, 379, 101, 196, 258, 25, 200, 179, 229, 227, 50, 52, 110, 363, 441, 231, 350, 349, 208, 406, 341, 304, 252, 314, 264, 239, 527, 185, 499, 61, 102, 362, 11, 462, 190, 194, 119, 14, 36, 410, 403, 292, 295, 87, 483, 253, 10, 469, 440, 58, 59, 173, 104, 195, 480, 434, 82, 66, 40, 355, 62, 70, 391, 475, 512, 482, 254, 516, 489, 478, 124, 4, 125, 352, 164, 331, 392, 286, 153, 90, 347, 206, 280, 141, 49, 405, 388, 249, 325, 43, 188, 245, 277, 123, 182, 202, 422, 265, 175, 439, 115, 424, 509, 149, 309, 168, 158, 246, 455, 156, 495, 147, 399, 137, 148, 197, 318, 324, 419, 91, 191, 138, 93, 305, 116, 368, 83, 453, 193, 75, 338, 77, 370, 279, 395, 296, 358, 283, 99, 378, 372, 122, 186, 169, 307, 308, 443, 339, 177, 199, 260, 163, 129, 135, 275, 22, 176, 198, 112, 504, 413, 0, 426, 223, 404, 118, 65, 302, 105, 390, 78, 19, 150, 160, 262, 496, 81, 96, 437, 132, 103, 266, 524, 321, 189, 461, 313, 428, 525, 459, 398, 493, 165, 346, 247, 386, 353, 130, 282, 503, 257, 288, 29, 342]

#450
#b_soln = [298, 45, 17, 72, 154, 212, 32, 48, 54, 180, 133, 162, 211, 242, 134, 289, 53, 142, 293, 214, 238, 267, 37, 295, 292, 87, 10, 253, 73, 117, 113, 166, 240, 55, 16, 23, 28, 274, 263, 272, 100, 183, 203, 35, 207, 58, 59, 173, 104, 195, 102, 61, 82, 66, 40, 62, 70, 124, 125, 4, 164, 123, 277, 43, 188, 245, 182, 202, 265, 175, 115, 75, 193, 91, 93, 138, 191, 197, 149, 168, 148, 137, 158, 246, 156, 147, 110, 52, 291, 151, 120, 270, 24, 281, 3, 94, 178, 226, 159, 222, 127, 155, 98, 300, 235, 284, 13, 71, 244, 169, 186, 122, 57, 116, 83, 99, 283, 77, 296, 279, 260, 163, 198, 129, 135, 275, 22, 176, 0, 112, 199, 177, 96, 81, 262, 223, 160, 150, 19, 78, 105, 118, 65, 302, 189, 132, 103, 266, 232, 126, 84, 218, 261, 12, 251, 30, 210, 297, 44, 74, 217, 255, 259, 89, 97, 228, 20, 21, 287, 220, 143, 290, 139, 1, 5, 108, 273, 271, 215, 64, 243, 38, 157, 181, 268, 106, 234, 121, 170, 299, 171, 136, 184, 152, 114, 8, 209, 86, 205, 213, 56, 95, 172, 219, 60, 131, 46, 236, 69, 33, 130, 29, 288, 257, 165, 282, 247, 224, 27, 128, 7, 26, 9, 145, 107, 92, 294, 144, 80, 2, 201, 250, 41, 6, 221, 76, 248, 167, 34, 216, 47, 111, 276, 187, 79, 88, 237, 39, 146, 225, 31, 204, 256, 51, 67, 63, 18, 42, 200, 179, 229, 227, 50, 231, 208, 141, 49, 249, 90, 153, 286, 254, 206, 280, 252, 264, 239, 185, 11, 190, 194, 119, 14, 36, 192, 68, 140, 233, 15, 269, 161, 85, 285, 241, 301, 109, 25, 258, 196, 101, 174, 230, 278]

#200
#b_soln = [72, 17, 45, 67, 63, 18, 42, 25, 109, 101, 32, 48, 54, 133, 134, 53, 28, 23, 100, 16, 55, 113, 117, 73, 35, 10, 58, 59, 104, 102, 82, 66, 40, 62, 70, 124, 125, 4, 123, 43, 90, 61, 11, 119, 14, 36, 87, 37, 142, 85, 15, 140, 68, 141, 49, 137, 91, 75, 115, 77, 99, 83, 122, 57, 116, 93, 138, 52, 110, 50, 24, 120, 127, 98, 89, 97, 20, 21, 44, 74, 13, 81, 96, 112, 129, 135, 22, 0, 105, 118, 65, 78, 19, 132, 103, 71, 84, 126, 12, 30, 29, 130, 33, 69, 114, 8, 86, 95, 56, 106, 60, 131, 46, 27, 128, 7, 26, 145, 107, 9, 92, 144, 80, 2, 121, 136, 143, 139, 1, 5, 108, 38, 64, 6, 41, 76, 34, 47, 111, 39, 94, 3, 79, 88, 31, 51]

#100
#b_soln = [38, 1, 5, 34, 47, 39, 31, 63, 67, 51, 45, 17, 72, 32, 48, 54, 53, 28, 23, 16, 55, 35, 73, 10, 58, 59, 37, 15, 36, 14, 11, 61, 66, 40, 62, 70, 4, 43, 49, 68, 25, 42, 18, 24, 3, 20, 21, 74, 44, 12, 30, 29, 71, 13, 57, 50, 52, 75, 22, 0, 19, 65, 33, 69, 8, 56, 60, 46, 27, 7, 26, 9, 2, 41, 6, 64]

#50
#b_soln = [15, 36, 14, 11, 4, 22, 0, 19, 13, 12, 30, 29, 33, 8, 27, 7, 26, 9, 2, 6, 34, 5, 1, 21, 20, 31, 3, 24, 18, 25, 17, 32, 28, 23, 16, 35, 10, 37]

#20
#b_soln = [14, 10, 15, 3, 1, 5, 6, 2, 9, 7, 8, 12, 13, 0, 4, 11]

#10
#b_soln = [6, 2, 7, 0, 4, 3, 5, 1]

list_plot = []

for a in range(0, len(b_soln)):
    list_plot.append(dataset[b_soln[a]])
    
list_plot.append(list_plot[0])

plt.gca().invert_yaxis()
plt.scatter(*zip(*dataset))
plt.plot(*zip(*list_plot))
plt.show()
#
Optimal = calc_length(dataset, b_soln)
print("\nShortest Route")
print(Optimal)












